{"version":3,"file":"static/js/95.c0fbf04c.chunk.js","mappings":"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","sources":["components/phoneBook/contactFilter/contatcFilter.styled.js","redux/contacts/selectors.js","components/phoneBook/contactFilter/conatactFilter.jsx","components/phoneBook/contactForm/contactForm.jsx","components/phoneBook/contactList/contactList.styled.js","components/phoneBook/contactList/emptyMessage.jsx","components/phoneBook/contactList/contactList.jsx","components/pages/Contacts.jsx","components/phoneBook/contactForm/contactForm.styled.js","redux/auth/validation.js"],"sourcesContent":["import styled from 'styled-components'\n\nexport const ContactsWrapper = styled.div`\nmargin-bottom: 20px;\nmargin-top: 20px;`\n\nexport const LabelForm = styled.label`\n\ncolor: ${({ theme: { colors } }) => colors.black};\nmargin: 0;\nmargin-bottom: 16px\nfont-size: 14px;\nfont-style: normal;\nfont-weight: 700;\nline-height: 1.33; \nletter-spacing: -0.18px;\n`\n\nexport const Search = styled.input`\n  display: flex;\npadding: 10px;\n`\n\nexport const ResetButtons = styled.button`\n  color: white;\n  background-color: transparent;\n  padding: 8px 16px;\n  border-radius: 36px;\n  border: none;\n  background-color: ${({ theme: {colors} }) => colors.borderListColor};\n  cursor: pointer;\n  transition: 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    \n  &:hover, &:focus {\n    background-color: ${({ theme: { colors } }) => colors.red};\n  }`\n\n  export const LabelContacts = styled.label`\ndisplay: flex;\nalign-items: center;\ngap: 20px;\ncolor: ${({theme: {colors}}) => colors.addBlack};\nfont-size: 16px;\nfont-style: normal;\nfont-weight: 700;\nline-height: 1.33; /* 133.333% */\nletter-spacing: -0.18px;\ntext-transform: uppercase;\n`","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n//* Всі селектори викликаються, коли змінюється шматок стану redux\n","import { useDispatch, useSelector } from 'react-redux';\nimport {\n  ContactsWrapper,\n  LabelContacts,\n  Search,\n  ResetButtons,\n} from './contatcFilter.styled';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { changeValueFilter } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const changeFilter = e => {\n    dispatch(changeValueFilter(e.currentTarget.value));\n  };\n\n  const resetFilters = () => {\n    dispatch(changeValueFilter(''));\n  };\n\n  return (\n    <ContactsWrapper>\n      <LabelContacts>\n        Find contacts by name\n        <Search\n          type=\"text\"\n          name=\"filter\"\n          value={filter}\n          onChange={changeFilter}\n        />\n        <ResetButtons type=\"button\" onClick={resetFilters}>\n          Reset filters\n        </ResetButtons>\n      </LabelContacts>\n    </ContactsWrapper>\n  );\n};\n","import {\n  Main,\n  ContactForm,\n  LabelForm,\n  FieldForm,\n  ErrorMsg,\n  Buttons,\n} from './contactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { addContact } from 'redux/contacts/contacts-operations';\nimport { getCreateFormSchema } from 'redux/auth/validation';\n\nconst schema = getCreateFormSchema();\n\nconst FormUser = () => {\n  const contacts = useSelector(selectContacts);\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { name, number } = values;\n\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      toast.error(`${name} already exists.`);\n      resetForm();\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n\n    toast.success(`${name} has succesfully added to your phonebook`);\n    resetForm();\n  };\n\n  return (\n    <Main\n      initialValues={{ name: '', number: '' }}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <ContactForm>\n        <LabelForm htmlFor=\"name\">\n          Name\n          <FieldForm\n            type=\"text\"\n            name=\"name\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n          <ErrorMsg name=\"name\" component=\"p\" />\n        </LabelForm>\n\n        <LabelForm htmlFor=\"number\">\n          Phone\n          <FieldForm type=\"tel\" name=\"number\" required />\n          <ErrorMsg name=\"number\" component=\"p\" />\n        </LabelForm>\n        <Buttons type=\"submit\">Add to contact</Buttons>\n        <Toaster />\n      </ContactForm>\n    </Main>\n  );\n};\n\nexport default FormUser;\n","import styled from 'styled-components';\n\nexport const Title = styled.h2`\n  padding-top: 20px;\n  padding-bottom: 20px;\n`;\n\nexport const MainTitle = styled.h1`\n  padding-top: 20px;\n  padding-bottom: 20px;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  column-gap: 20px;\n  row-gap: 40px;\n  padding-bottom: 20px;\n`;\n\nexport const ListItem = styled.li`\n  flex-basis: calc((100% - 40px) / 5);\n  border: 1px solid ${({ theme: { colors } }) => colors.borderListColor};\n  padding: 10px;\n  border-radius: 4px;\n  background-color: ${({ theme: { colors } }) => colors.white};\n  margin: 10px;\n`;\n\nexport const Topic = styled.p`\n  letter-spacing: 0.02em;\n  color: ${({ theme: { colors } }) => colors.black};\n  margin-bottom: 16px;\n`;\n\nexport const ItemButton = styled.button`\n  background-color: transparent;\n  padding: 8px 16px;\n  border-radius: 36px;\n  border: none;\n  background-color: ${({ theme: { colors } }) => colors.buttonDeleteColor};\n  cursor: pointer;\n  transition: 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    background-color: ${({ theme: { colors } }) => colors.red};\n  }\n`;\n\nexport const MessageWrapper = styled.div`\n  margin: 0 auto;\n`;\n\nexport const Message = styled.p`\n  padding: 10px;\n  color: rgba(0, 0, 0, 0.6);\n  font-size: 18px;\n  font-style: normal;\n  font-weight: 700;\n  line-height: 1.33;\n  letter-spacing: -0.36px;\n`;\n\nexport const IconMessage = styled.img`\n  padding: 40px 0;\n`;\n","import { IconMessage, Message, MessageWrapper } from './contactList.styled';\n\nexport const EmptyMessage = () => {\n  const emptyImg =\n    'https://www.iconbunny.com/icons/media/catalog/product/4/4/444.1-contacts-icon-iconbunny.jpg';\n\n  return (\n    <MessageWrapper>\n      <IconMessage src={emptyImg} alt=\"empty contacts\" width={200} />\n      <Message>Your contact list is empty.Try add some contacts</Message>\n    </MessageWrapper>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { List, ListItem, Topic, ItemButton } from './contactList.styled';\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/contacts-operations';\nimport { EmptyMessage } from './emptyMessage';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectFilteredContacts);\n  const dispatch = useDispatch();\n\n  const handleDelete = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  return (\n    <>\n      <List>\n        {contacts.map(contact => (\n          <ListItem key={contact.id}>\n            <Topic>\n              {contact.name} : {contact.number}\n            </Topic>\n            <ItemButton type=\"button\" onClick={() => handleDelete(contact.id)}>\n              Delete\n            </ItemButton>\n          </ListItem>\n        ))}\n        {contacts && contacts.length === 0 && <EmptyMessage />}\n      </List>\n    </>\n  );\n};\n","import { Filter } from 'components/phoneBook/contactFilter/conatactFilter';\nimport FormUser from 'components/phoneBook/contactForm/contactForm';\nimport { ContactList } from 'components/phoneBook/contactList/contactList';\n\nconst Contacts = () => {\n  return (\n    <>\n      <h2>Your contacts</h2>\n      <FormUser />\n      <Filter />\n      <ContactList />\n    </>\n  );\n};\n\nexport default Contacts;\n","import styled from 'styled-components';\nimport { Formik, Form, ErrorMessage, Field } from 'formik';\n\nexport const Main = styled(Formik)`\n  height: 40px;\n  margin-bottom: 16px;\n  color: ${({ theme: { colors } }) => colors.red};\n`;\n\nexport const ContactForm = styled(Form)`\n  display: flex;\n  flex-flow: column;\n  gap: 16px;\n  padding: 20px;\n\n  background-color: ${({ theme: { colors } }) => colors.white};\n  box-shadow: ${({ theme: { shadows } }) => shadows.addBoxShadow};\n`;\n\nexport const LabelForm = styled.label`\n  color: ${({ theme: { colors } }) => colors.black};\n  margin: 0;\n  margin-bottom: 16px;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 700;\n  line-height: 1.33;\n  letter-spacing: -0.18px;\n`;\n\nexport const ErrorMsg = styled(ErrorMessage)`\n  margin-top: 10px;\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1;\n  letter-spacing: -0.72px;\n  color: red;\n`;\n\nexport const Error = styled(ErrorMessage)`\n  margin-top: 10px;\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1;\n  letter-spacing: -0.72px;\n  color: red;\n`;\n\nexport const FieldForm = styled(Field)`\n  display: flex;\n  padding: 10px;\n  border: none;\n  border: 1px solid ${({ theme: { colors } }) => colors.inputGrey};\n  font-size: 16px;\n  border-radius: 4px;\n  background-color: transparent;\n  color: ${({ theme: { colors } }) => colors.black};\n  transition: border-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:focus,\n  &:active {\n    border-color: #1db954;\n    outline: none;\n  }\n`;\n\nexport const Buttons = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 300px;\n  padding: 20px 60px;\n  margin: 0 auto;\n  cursor: pointer;\n  color: ${({ theme: { colors } }) => colors.black};\n  background-color: ${({ theme: { colors } }) => colors.backroundBase};\n  font-family: inherit;\n  font-weight: 700;\n  font-size: 16px;\n  line-height: 1.5;\n  letter-spacing: 0.04em;\n  border-radius: 40px;\n  border: none;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    background-color: ${({ theme: { colors } }) => colors.backroundHighLight};\n  }\n`;\n","import * as yup from 'yup';\n\nexport const getRegisterSchema = () => {\n  return yup.object().shape({\n    name: yup\n      .string()\n      .matches(/^[a-zA-Zа-яА-Я\\s'-]*$/, 'Name should not contain numbers')\n      .required(),\n    email: yup.string().email('Invalid email format').required(),\n    password: yup\n      .string()\n      .min(6, 'Password must be at least 6 characters')\n      .required(),\n  });\n};\n\nexport const getLoginSchema = () => {\n  return yup.object().shape({\n    email: yup.string().email('Invalid email format').required(),\n    password: yup\n      .string()\n      .min(6, 'Password must be at least 6 characters')\n      .required(),\n  });\n};\n\nexport const getCreateFormSchema = () => {\n  return yup.object().shape({\n    name: yup\n      .string()\n      .matches(/^[a-zA-Zа-яА-Я\\s'-]*$/, 'Name should not contain numbers')\n      .required(),\n    number: yup\n      .string()\n      .min(5, 'Too short  phone number')\n      .max(12, 'Too long phone number')\n      .matches(\n        /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/,\n        'Invalid phone number format'\n      )\n      .required(),\n  });\n};\n"],"names":["ContactsWrapper","styled","_templateObject","_taggedTemplateLiteral","Search","_templateObject2","_ref","theme","colors","black","_templateObject3","ResetButtons","_templateObject4","_ref2","borderListColor","_ref3","red","LabelContacts","_templateObject5","_ref4","addBlack","selectContacts","state","contacts","items","selectFilter","filter","selectFilteredContacts","createSelector","contact","name","toLowerCase","includes","Filter","useSelector","dispatch","useDispatch","_jsx","children","_jsxs","type","value","onChange","e","changeValueFilter","currentTarget","onClick","schema","getCreateFormSchema","Main","initialValues","number","validationSchema","onSubmit","values","resetForm","find","toast","concat","addContact","ContactForm","LabelForm","htmlFor","FieldForm","title","required","ErrorMsg","component","Buttons","Toaster","List","ListItem","white","Topic","ItemButton","_templateObject6","buttonDeleteColor","_ref5","MessageWrapper","_templateObject7","Message","_templateObject8","IconMessage","_templateObject9","EmptyMessage","src","alt","width","ContactList","_Fragment","map","contactId","id","deleteContact","length","FormUser","Formik","Form","shadows","addBoxShadow","ErrorMessage","Error","Field","inputGrey","_ref6","_ref7","_ref8","backroundBase","_ref9","backroundHighLight","getRegisterSchema","yup","shape","matches","email","password","min","getLoginSchema","max"],"sourceRoot":""}