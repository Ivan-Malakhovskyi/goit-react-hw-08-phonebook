{"version":3,"file":"static/js/563.e68e3936.chunk.js","mappings":"8OAEaA,EAAkBC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,uDAgB5BC,GAXYH,EAAAA,GAAAA,MAAYI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,iLAC1B,SAAAG,GAAkB,OAAAA,EAAfC,MAASC,OAAsBC,KAAK,IAU5BR,EAAAA,GAAAA,MAAYS,IAAAA,GAAAP,EAAAA,EAAAA,GAAA,kUAIZ,SAAAQ,GAAkB,OAAAA,EAAfJ,MAASC,OAAsBI,SAAS,IAItD,SAAAC,GAAkB,OAAAA,EAAfN,MAASC,OAAsBC,KAAK,IAK9B,SAAAK,GAAkB,OAAAA,EAAfP,MAASC,OAAsBO,QAAQ,KAKjDC,EAAef,EAAAA,GAAAA,OAAagB,IAAAA,GAAAd,EAAAA,EAAAA,GAAA,uRAC9B,SAAAe,GAAkB,OAAAA,EAAfX,MAASC,OAAsBO,QAAQ,IAK/B,SAAAI,GAAkB,OAAAA,EAAfZ,MAASC,OAAsBY,MAAM,IAMtC,SAAAC,GAAkB,OAAAA,EAAfd,MAASC,OAAsBc,GAAG,IAIhDC,EAAgBtB,EAAAA,GAAAA,MAAYuB,IAAAA,GAAArB,EAAAA,EAAAA,GAAA,gPAI9B,SAAAsB,GAAkB,OAAAA,EAAflB,MAASC,OAAsBO,QAAQ,I,UCtDxCW,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAM,EAM/CC,EAAe,SAAAH,GAAK,OAAIA,EAAMI,MAAO,EAErCC,GAAyBC,EAAAA,EAAAA,IACpC,CAACP,EAAgBI,IACjB,SAACF,EAAUG,GACT,OAAOH,EAASG,QAAO,SAAAG,GAAO,OAC5BA,EAAQC,KAAKC,cAAcC,SAASN,EAAOK,cAAc,GAE7D,I,mBCNWE,EAAS,WACpB,IAAMP,GAASQ,EAAAA,EAAAA,IAAYT,GACrBU,GAAWC,EAAAA,EAAAA,MAUjB,OACEC,EAAAA,EAAAA,KAAC1C,EAAe,CAAA2C,UACdC,EAAAA,EAAAA,MAACrB,EAAa,CAAAoB,SAAA,CAAC,yBAEbD,EAAAA,EAAAA,KAACtC,EAAM,CACLyC,KAAK,OACLV,KAAK,SACLW,MAAOf,EACPgB,SAhBa,SAAAC,GACnBR,GAASS,EAAAA,EAAAA,GAAkBD,EAAEE,cAAcJ,OAC7C,KAgBMJ,EAAAA,EAAAA,KAAC1B,EAAY,CAAC6B,KAAK,SAASM,QAdb,WACnBX,GAASS,EAAAA,EAAAA,GAAkB,IAC7B,EAYwDN,SAAC,sBAM3D,E,8BCxBMS,GAASC,E,QAAAA,MAwDf,EAtDiB,WACf,IAAMzB,GAAWW,EAAAA,EAAAA,IAAYb,GAEvBc,GAAWC,EAAAA,EAAAA,MAqBjB,OACEC,EAAAA,EAAAA,KAACY,EAAAA,GAAI,CACHC,cAAe,CAAEpB,KAAM,GAAIqB,OAAQ,IACnCC,iBAAkBL,EAClBM,SAvBiB,SAACC,EAAMrD,GAAqB,IAAjBsD,EAAStD,EAATsD,UACtBzB,EAAiBwB,EAAjBxB,KAAMqB,EAAWG,EAAXH,OAEd,GACE5B,EAASiC,MACP,SAAA3B,GAAO,OAAIA,EAAQC,KAAKC,gBAAkBD,EAAKC,aAAa,IAK9D,OAFA0B,EAAAA,GAAAA,MAAY,GAADC,OAAI5B,EAAI,0BACnByB,IAIFpB,GAASwB,EAAAA,EAAAA,IAAW,CAAE7B,KAAAA,EAAMqB,OAAAA,KAE5BM,EAAAA,GAAAA,QAAc,GAADC,OAAI5B,EAAI,6CACrByB,GACF,EAM2BjB,UAEvBC,EAAAA,EAAAA,MAACqB,EAAAA,EAAW,CAAAtB,SAAA,EACVC,EAAAA,EAAAA,MAACsB,EAAAA,GAAS,CAACC,QAAQ,OAAMxB,SAAA,CAAC,QAExBD,EAAAA,EAAAA,KAAC0B,EAAAA,GAAS,CACRvB,KAAK,OACLV,KAAK,OACLkC,MAAM,yIACNC,UAAQ,KAEV5B,EAAAA,EAAAA,KAAC6B,EAAAA,GAAQ,CAACpC,KAAK,OAAOqC,UAAU,UAGlC5B,EAAAA,EAAAA,MAACsB,EAAAA,GAAS,CAACC,QAAQ,SAAQxB,SAAA,CAAC,SAE1BD,EAAAA,EAAAA,KAAC0B,EAAAA,GAAS,CAACvB,KAAK,MAAMV,KAAK,SAASmC,UAAQ,KAC5C5B,EAAAA,EAAAA,KAAC6B,EAAAA,GAAQ,CAACpC,KAAK,SAASqC,UAAU,UAEpC9B,EAAAA,EAAAA,KAAC+B,EAAAA,GAAO,CAAC5B,KAAK,SAAQF,SAAC,oBACvBD,EAAAA,EAAAA,KAACgC,EAAAA,GAAO,QAIhB,ECxDaC,GAVQ1E,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,yDAKLF,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,yDAKdF,EAAAA,GAAAA,GAASS,IAAAA,GAAAP,EAAAA,EAAAA,GAAA,iHAQhByE,EAAW3E,EAAAA,GAAAA,GAASgB,IAAAA,GAAAd,EAAAA,EAAAA,GAAA,gKAEX,SAAAG,GAAkB,OAAAA,EAAfC,MAASC,OAAsBO,QAAQ,IAG1C,SAAAJ,GAAkB,OAAAA,EAAfJ,MAASC,OAAsBqE,mBAAmB,IAI9DC,EAAQ7E,EAAAA,GAAAA,EAAQuB,IAAAA,GAAArB,EAAAA,EAAAA,GAAA,4EAElB,SAAAU,GAAkB,OAAAA,EAAfN,MAASC,OAAsBC,KAAK,IAIrCsE,EAAiB9E,EAAAA,GAAAA,IAAU+E,IAAAA,GAAA7E,EAAAA,EAAAA,GAAA,6BAI3B8E,EAAUhF,EAAAA,GAAAA,EAAQiF,IAAAA,GAAA/E,EAAAA,EAAAA,GAAA,4KAUlBgF,EAAclF,EAAAA,GAAAA,IAAUmF,IAAAA,GAAAjF,EAAAA,EAAAA,GAAA,8B,6DC9CxBkF,EAAe,WAC1B,OACEzC,EAAAA,EAAAA,MAACmC,EAAc,CAAApC,SAAA,EACbD,EAAAA,EAAAA,KAACyC,EAAW,CAACG,IAAKC,EAAOC,IAAI,iBAAiBC,MAAO,OACrD/C,EAAAA,EAAAA,KAACuC,EAAO,CAAAtC,SAAC,uDAGf,E,oBCHa+C,EAAc,WACzB,IAAM9D,GAAWW,EAAAA,EAAAA,IAAYP,GACvBQ,GAAWC,EAAAA,EAAAA,MAMjB,OACEG,EAAAA,EAAAA,MAAC+B,EAAI,CAAAhC,SAAA,CACFf,EAAS+D,KAAI,SAAAzD,GAAO,OACnBU,EAAAA,EAAAA,MAACgC,EAAQ,CAAAjC,SAAA,EACPC,EAAAA,EAAAA,MAACkC,EAAK,CAAAnC,SAAA,CACHT,EAAQC,KAAK,MAAID,EAAQsB,WAE5Bd,EAAAA,EAAAA,KAACkD,EAAAA,EAAI,CACHC,GAAIC,EAAAA,EACJ3C,QAAS,kBAbE4C,EAaiB7D,EAAQ8D,QAZ5CxD,GAASyD,EAAAA,EAAAA,IAAcF,IADJ,IAAAA,CAa4B,MAN5B7D,EAAQ8D,GAQZ,IAEZpE,GAAgC,IAApBA,EAASsE,SAAgBxD,EAAAA,EAAAA,KAAC2C,EAAY,MAGzD,E,oBCPA,EAhBiB,WACf,IAAM7C,GAAWC,EAAAA,EAAAA,MAKjB,OAJA0D,EAAAA,EAAAA,YAAU,WACR3D,GAAS4D,EAAAA,EAAAA,MACX,GAAG,CAAC5D,KAGFI,EAAAA,EAAAA,MAAAyD,EAAAA,SAAA,CAAA1D,SAAA,EACED,EAAAA,EAAAA,KAAC4D,EAAAA,EAAO,CAACT,GAAG,KAAKU,KAAK,QACtB7D,EAAAA,EAAAA,KAAC8D,EAAQ,KACT9D,EAAAA,EAAAA,KAACJ,EAAM,KACPI,EAAAA,EAAAA,KAACgD,EAAW,MAGlB,C,sPCnBapC,GAAOrD,EAAAA,EAAAA,IAAOwG,EAAAA,GAAPxG,CAAcC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,kEAGvB,SAAAG,GAAkB,OAAAA,EAAfC,MAASC,OAAsBc,GAAG,IAGnC2C,GAAchE,EAAAA,EAAAA,IAAOyG,EAAAA,GAAPzG,CAAYI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,iKAQjB,SAAAQ,GAAkB,OAAAA,EAAfJ,MAASC,OAAsBqE,mBAAmB,IAC3D,SAAAhE,GAAmB,OAAAA,EAAhBN,MAASoG,QAAwBC,YAAY,IAGnD1C,EAAYjE,EAAAA,GAAAA,MAAYS,IAAAA,GAAAP,EAAAA,EAAAA,GAAA,iLAC1B,SAAAW,GAAkB,OAAAA,EAAfP,MAASC,OAAsBC,KAAK,IAUrC8D,GAAWtE,EAAAA,EAAAA,IAAO4G,EAAAA,GAAP5G,CAAoBgB,IAAAA,GAAAd,EAAAA,EAAAA,GAAA,6JAU/B2G,GAAQ7G,EAAAA,EAAAA,IAAO4G,EAAAA,GAAP5G,CAAoBuB,IAAAA,GAAArB,EAAAA,EAAAA,GAAA,6JAU5BiE,GAAYnE,EAAAA,EAAAA,IAAO8G,EAAAA,GAAP9G,CAAa+E,IAAAA,GAAA7E,EAAAA,EAAAA,GAAA,kUAIhB,SAAAe,GAAkB,OAAAA,EAAfX,MAASC,OAAsBI,SAAS,IAItD,SAAAO,GAAkB,OAAAA,EAAfZ,MAASC,OAAsBC,KAAK,IAK9B,SAAAY,GAAkB,OAAAA,EAAfd,MAASC,OAAsBO,QAAQ,IAKjD0D,EAAUxE,EAAAA,GAAAA,OAAaiF,IAAAA,GAAA/E,EAAAA,EAAAA,GAAA,meAQzB,SAAAsB,GAAkB,OAAAA,EAAflB,MAASC,OAAsBwG,KAAK,IAC5B,SAAAC,GAAkB,OAAAA,EAAf1G,MAASC,OAAsBO,QAAQ,IAYxC,SAAAmG,GAAkB,OAAAA,EAAf3G,MAASC,OAAsBC,KAAK,G,sHCzFlD0G,EAAoB,WAC/B,OAAOC,EAAAA,KAAaC,MAAM,CACxBlF,KAAMiF,EAAAA,KAEHE,QAAQ,4CAAyB,mCACjChD,WACHiD,MAAOH,EAAAA,KAAaG,MAAM,wBAAwBjD,WAClDkD,SAAUJ,EAAAA,KAEPK,IAAI,EAAG,0CACPnD,YAEP,EAEaoD,EAAiB,WAC5B,OAAON,EAAAA,KAAaC,MAAM,CACxBE,MAAOH,EAAAA,KAAaG,MAAM,wBAAwBjD,WAClDkD,SAAUJ,EAAAA,KAEPK,IAAI,EAAG,0CACPnD,YAEP,EAEajB,EAAsB,WACjC,OAAO+D,EAAAA,KAAaC,MAAM,CACxBlF,KAAMiF,EAAAA,KAEHE,QAAQ,4CAAyB,mCACjChD,WACHd,OAAQ4D,EAAAA,KAELK,IAAI,EAAG,2BACPE,IAAI,GAAI,yBACRL,QACC,+EACA,+BAEDhD,YAEP,C","sources":["components/phoneBook/contactFilter/contatcFilter.styled.js","redux/contacts/selectors.js","components/phoneBook/contactFilter/conatactFilter.jsx","components/phoneBook/contactForm/contactForm.jsx","components/phoneBook/contactList/contactList.styled.js","components/phoneBook/contactList/emptyMessage.jsx","components/phoneBook/contactList/contactList.jsx","components/pages/Contacts.jsx","components/phoneBook/contactForm/contactForm.styled.js","redux/auth/validation.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ContactsWrapper = styled.div`\n  margin-bottom: 20px;\n  margin-top: 20px;\n`;\n\nexport const LabelForm = styled.label`\n  color: ${({ theme: { colors } }) => colors.black};\n  margin: 0;\n  margin-bottom: 16px;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 700;\n  line-height: 1.33;\n  letter-spacing: -0.18px;\n`;\n\nexport const Search = styled.input`\n  display: flex;\n  padding: 10px;\n  border: none;\n  border: 1px solid ${({ theme: { colors } }) => colors.inputGrey};\n  font-size: 16px;\n  border-radius: 4px;\n  background-color: transparent;\n  color: ${({ theme: { colors } }) => colors.black};\n  transition: border-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:focus,\n  &:active {\n    border-color: ${({ theme: { colors } }) => colors.addBlack};\n    outline: none;\n  }\n`;\n\nexport const ResetButtons = styled.button`\n  color: ${({ theme: { colors } }) => colors.addBlack};\n  background-color: transparent;\n  padding: 8px 16px;\n  border-radius: 36px;\n  border: none;\n  background-color: ${({ theme: { colors } }) => colors.yellow};\n  cursor: pointer;\n  transition: 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    background-color: ${({ theme: { colors } }) => colors.red};\n  }\n`;\n\nexport const LabelContacts = styled.label`\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  color: ${({ theme: { colors } }) => colors.addBlack};\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 700;\n  line-height: 1.33; /* 133.333% */\n  letter-spacing: -0.18px;\n  text-transform: uppercase;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n//* Всі селектори викликаються, коли змінюється шматок стану redux\n","import { useDispatch, useSelector } from 'react-redux';\nimport {\n  ContactsWrapper,\n  LabelContacts,\n  Search,\n  ResetButtons,\n} from './contatcFilter.styled';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { changeValueFilter } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const changeFilter = e => {\n    dispatch(changeValueFilter(e.currentTarget.value));\n  };\n\n  const resetFilters = () => {\n    dispatch(changeValueFilter(''));\n  };\n\n  return (\n    <ContactsWrapper>\n      <LabelContacts>\n        Find contacts by name\n        <Search\n          type=\"text\"\n          name=\"filter\"\n          value={filter}\n          onChange={changeFilter}\n        />\n        <ResetButtons type=\"button\" onClick={resetFilters}>\n          Reset filters\n        </ResetButtons>\n      </LabelContacts>\n    </ContactsWrapper>\n  );\n};\n","import {\n  Main,\n  ContactForm,\n  LabelForm,\n  FieldForm,\n  ErrorMsg,\n  Buttons,\n} from './contactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { addContact } from 'redux/contacts/contacts-operations';\nimport { getCreateFormSchema } from 'redux/auth/validation';\n\nconst schema = getCreateFormSchema();\n\nconst FormUser = () => {\n  const contacts = useSelector(selectContacts);\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { name, number } = values;\n\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      toast.error(`${name} already exists.`);\n      resetForm();\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n\n    toast.success(`${name} has succesfully added to your phonebook`);\n    resetForm();\n  };\n\n  return (\n    <Main\n      initialValues={{ name: '', number: '' }}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <ContactForm>\n        <LabelForm htmlFor=\"name\">\n          Name\n          <FieldForm\n            type=\"text\"\n            name=\"name\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n          <ErrorMsg name=\"name\" component=\"p\" />\n        </LabelForm>\n\n        <LabelForm htmlFor=\"number\">\n          Phone\n          <FieldForm type=\"tel\" name=\"number\" required />\n          <ErrorMsg name=\"number\" component=\"p\" />\n        </LabelForm>\n        <Buttons type=\"submit\">Add to contact</Buttons>\n        <Toaster />\n      </ContactForm>\n    </Main>\n  );\n};\n\nexport default FormUser;\n","import styled from 'styled-components';\n\nexport const Title = styled.h2`\n  padding-top: 20px;\n  padding-bottom: 20px;\n`;\n\nexport const MainTitle = styled.h1`\n  padding-top: 20px;\n  padding-bottom: 20px;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  column-gap: 20px;\n  row-gap: 40px;\n  padding-bottom: 20px;\n`;\n\nexport const ListItem = styled.li`\n  flex-basis: calc((100% - 40px) / 5);\n  border: 1px solid ${({ theme: { colors } }) => colors.addBlack};\n  padding: 10px;\n  border-radius: 4px;\n  background-color: ${({ theme: { colors } }) => colors.MainBackgroundColor};\n  margin: 10px;\n`;\n\nexport const Topic = styled.p`\n  letter-spacing: 0.02em;\n  color: ${({ theme: { colors } }) => colors.black};\n  margin-bottom: 16px;\n`;\n\nexport const MessageWrapper = styled.div`\n  margin: 0 auto;\n`;\n\nexport const Message = styled.p`\n  padding: 10px;\n  color: rgba(0, 0, 0, 0.6);\n  font-size: 18px;\n  font-style: normal;\n  font-weight: 700;\n  line-height: 1.33;\n  letter-spacing: -0.36px;\n`;\n\nexport const IconMessage = styled.img`\n  padding: 40px 0;\n`;\n","import { IconMessage, Message, MessageWrapper } from './contactList.styled';\nimport empty from '../../images/empty_contacts.jpg';\n\nexport const EmptyMessage = () => {\n  return (\n    <MessageWrapper>\n      <IconMessage src={empty} alt=\"empty contacts\" width={200} />\n      <Message>Your contact list is empty.Try add some contacts</Message>\n    </MessageWrapper>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { List, ListItem, Topic } from './contactList.styled';\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/contacts-operations';\nimport { EmptyMessage } from './emptyMessage';\nimport { CloseButton, Icon } from '@chakra-ui/react';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectFilteredContacts);\n  const dispatch = useDispatch();\n\n  const handleDelete = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  return (\n    <List>\n      {contacts.map(contact => (\n        <ListItem key={contact.id}>\n          <Topic>\n            {contact.name} : {contact.number}\n          </Topic>\n          <Icon\n            as={CloseButton}\n            onClick={() => handleDelete(contact.id)}\n          ></Icon>\n        </ListItem>\n      ))}\n      {contacts && contacts.length === 0 && <EmptyMessage />}\n    </List>\n  );\n};\n","import { Filter } from 'components/phoneBook/contactFilter/conatactFilter';\nimport FormUser from 'components/phoneBook/contactForm/contactForm';\nimport { ContactList } from 'components/phoneBook/contactList/contactList';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { serviceContacts } from 'redux/contacts/contacts-operations';\nimport { Heading } from '@chakra-ui/react';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(serviceContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Heading as=\"h2\" size=\"xl\"></Heading>\n      <FormUser />\n      <Filter />\n      <ContactList />\n    </>\n  );\n};\n\nexport default Contacts;\n","import styled from 'styled-components';\nimport { Formik, Form, ErrorMessage, Field } from 'formik';\n\nexport const Main = styled(Formik)`\n  height: 40px;\n  margin-bottom: 16px;\n  color: ${({ theme: { colors } }) => colors.red};\n`;\n\nexport const ContactForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  padding: 20px;\n\n  border-radius: 18px;\n\n  background-color: ${({ theme: { colors } }) => colors.MainBackgroundColor};\n  box-shadow: ${({ theme: { shadows } }) => shadows.addBoxShadow};\n`;\n\nexport const LabelForm = styled.label`\n  color: ${({ theme: { colors } }) => colors.black};\n  margin: 0;\n  margin-bottom: 16px;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 700;\n  line-height: 1.33;\n  letter-spacing: -0.18px;\n`;\n\nexport const ErrorMsg = styled(ErrorMessage)`\n  margin-top: 10px;\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1;\n  letter-spacing: -0.72px;\n  color: red;\n`;\n\nexport const Error = styled(ErrorMessage)`\n  margin-top: 10px;\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1;\n  letter-spacing: -0.72px;\n  color: red;\n`;\n\nexport const FieldForm = styled(Field)`\n  display: flex;\n  padding: 10px;\n  border: none;\n  border: 1px solid ${({ theme: { colors } }) => colors.inputGrey};\n  font-size: 16px;\n  border-radius: 4px;\n  background-color: transparent;\n  color: ${({ theme: { colors } }) => colors.black};\n  transition: border-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:focus,\n  &:active {\n    border-color: ${({ theme: { colors } }) => colors.addBlack};\n    outline: none;\n  }\n`;\n\nexport const Buttons = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 300px;\n  padding: 20px 40px;\n  margin: 0 auto;\n  cursor: pointer;\n  color: ${({ theme: { colors } }) => colors.white};\n  background-color: ${({ theme: { colors } }) => colors.addBlack};\n  border: none;\n  font-family: inherit;\n  font-weight: 700;\n  font-size: 16px;\n  line-height: 1.5;\n  letter-spacing: 0.04em;\n  border-radius: 40px;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    background-color: ${({ theme: { colors } }) => colors.black};\n  }\n`;\n","import * as yup from 'yup';\n\nexport const getRegisterSchema = () => {\n  return yup.object().shape({\n    name: yup\n      .string()\n      .matches(/^[a-zA-Zа-яА-Я\\s'-]*$/, 'Name should not contain numbers')\n      .required(),\n    email: yup.string().email('Invalid email format').required(),\n    password: yup\n      .string()\n      .min(6, 'Password must be at least 6 characters')\n      .required(),\n  });\n};\n\nexport const getLoginSchema = () => {\n  return yup.object().shape({\n    email: yup.string().email('Invalid email format').required(),\n    password: yup\n      .string()\n      .min(6, 'Password must be at least 6 characters')\n      .required(),\n  });\n};\n\nexport const getCreateFormSchema = () => {\n  return yup.object().shape({\n    name: yup\n      .string()\n      .matches(/^[a-zA-Zа-яА-Я\\s'-]*$/, 'Name should not contain numbers')\n      .required(),\n    number: yup\n      .string()\n      .min(5, 'Too short  phone number')\n      .max(12, 'Too long phone number')\n      .matches(\n        /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/,\n        'Invalid phone number format'\n      )\n      .required(),\n  });\n};\n"],"names":["ContactsWrapper","styled","_templateObject","_taggedTemplateLiteral","Search","_templateObject2","_ref","theme","colors","black","_templateObject3","_ref2","inputGrey","_ref3","_ref4","addBlack","ResetButtons","_templateObject4","_ref5","_ref6","yellow","_ref7","red","LabelContacts","_templateObject5","_ref8","selectContacts","state","contacts","items","selectFilter","filter","selectFilteredContacts","createSelector","contact","name","toLowerCase","includes","Filter","useSelector","dispatch","useDispatch","_jsx","children","_jsxs","type","value","onChange","e","changeValueFilter","currentTarget","onClick","schema","getCreateFormSchema","Main","initialValues","number","validationSchema","onSubmit","values","resetForm","find","toast","concat","addContact","ContactForm","LabelForm","htmlFor","FieldForm","title","required","ErrorMsg","component","Buttons","Toaster","List","ListItem","MainBackgroundColor","Topic","MessageWrapper","_templateObject6","Message","_templateObject7","IconMessage","_templateObject8","EmptyMessage","src","empty","alt","width","ContactList","map","Icon","as","CloseButton","contactId","id","deleteContact","length","useEffect","serviceContacts","_Fragment","Heading","size","FormUser","Formik","Form","shadows","addBoxShadow","ErrorMessage","Error","Field","white","_ref9","_ref10","getRegisterSchema","yup","shape","matches","email","password","min","getLoginSchema","max"],"sourceRoot":""}